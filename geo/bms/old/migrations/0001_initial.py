# Generated by Django 3.0.3 on 2020-10-02 06:54

from django.db import migrations, models
import django.db.models.deletion
import old.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Client',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('firstname', models.TextField(null=True)),
                ('lastname', models.TextField(null=True)),
                ('status', models.BooleanField(default=1)),
                ('notes', models.TextField(blank=True, null=True)),
                ('old_id', models.IntegerField(default=0)),
            ],
            options={
                'ordering': ('firstname',),
            },
        ),
        migrations.CreateModel(
            name='Element',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.TextField()),
                ('notes', models.TextField(blank=True, null=True)),
            ],
            options={
                'ordering': ('-id',),
            },
        ),
        migrations.CreateModel(
            name='Job',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.TextField()),
                ('open', models.DateField()),
                ('notes', models.TextField(blank=True, null=True)),
                ('old_id', models.IntegerField(default=0)),
                ('client', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='old.Client')),
            ],
            options={
                'ordering': ('-open',),
            },
        ),
        migrations.CreateModel(
            name='Location',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.TextField()),
                ('notes', models.TextField(blank=True, null=True)),
                ('old_id', models.IntegerField(default=0)),
            ],
            options={
                'ordering': ('-id',),
            },
        ),
        migrations.CreateModel(
            name='Organisation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField(null=True)),
                ('abbreviation', models.TextField(null=True)),
                ('address', models.TextField(blank=True, null=True)),
                ('notes', models.TextField(blank=True, null=True)),
                ('old_id', models.IntegerField(default=0)),
            ],
            options={
                'ordering': ('abbreviation',),
            },
        ),
        migrations.CreateModel(
            name='Receipt',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('upload', models.FileField(upload_to=old.models.rename_receipt)),
                ('date', models.DateField()),
                ('value', models.DecimalField(decimal_places=2, max_digits=9)),
                ('currency', models.TextField(default='AUD')),
                ('category', models.TextField(blank=True, choices=[('field_supplies', 'Field Supplies'), ('equipment_hire', 'Equipment Hire'), ('laboratory_supplies', 'Laboratory Supplies'), ('laboratory_chemicals', 'Laboratory Chemicals'), ('laboratory_services', 'Laboratory Services'), ('office_supplies', 'Office Supplies'), ('computer_part', 'Computer Part'), ('computer_software', 'Computer Software'), ('it_service', 'IT Service'), ('meals_and_accommodation', 'Meals and Accommodation'), ('vehicle_maintenance', 'Vehicle Maintenance'), ('vehicle_accessories', 'Vehicle Accessories'), ('vehicle_fuel', 'Vehicle Fuel'), ('vehicle_registration', 'Vehicle Registration'), ('vehicle_insurance', 'Vehicle Insurance'), ('post', 'Post'), ('phone', 'Phone'), ('asset', 'Asset'), ('laboratory_hardware', 'Laboratory Hardware'), ('household', 'Household')], null=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('note', models.TextField(blank=True, null=True)),
            ],
            options={
                'ordering': ('-id',),
            },
        ),
        migrations.CreateModel(
            name='Sample',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('field_label', models.TextField(blank=True, null=True)),
                ('x_cm', models.FloatField(blank=True, default=None, null=True)),
                ('y_cm', models.FloatField(blank=True, default=None, null=True)),
                ('z_cm', models.FloatField(blank=True, null=True)),
                ('upper_depth_cm', models.FloatField(blank=True, null=True)),
                ('lower_depth_cm', models.FloatField(blank=True, null=True)),
                ('sample_and_vessel_g', models.FloatField(blank=True, null=True)),
                ('vessel_g', models.FloatField(blank=True, null=True)),
                ('gravel_g', models.FloatField(blank=True, null=True)),
                ('notes', models.TextField(blank=True, null=True)),
                ('element', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='old.Element')),
            ],
        ),
        migrations.CreateModel(
            name='Rank',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('child', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='child_element', to='old.Element')),
                ('parent', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='parent_element', to='old.Element')),
            ],
            options={
                'ordering': ('-id',),
            },
        ),
        migrations.CreateModel(
            name='Quote',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(blank=True, null=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('status', models.NullBooleanField(default=None)),
                ('notes', models.TextField(blank=True, null=True)),
                ('job', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='old.Job')),
            ],
            options={
                'ordering': ('-id',),
            },
        ),
        migrations.CreateModel(
            name='PSA',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('lab_id', models.IntegerField()),
                ('date', models.DateField(blank=True, null=True)),
                ('notes', models.TextField(blank=True, null=True)),
                ('sample', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='old.Sample')),
            ],
        ),
        migrations.CreateModel(
            name='JobStatus',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField()),
                ('status', models.BooleanField()),
                ('notes', models.TextField(blank=True, null=True)),
                ('job', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='old.Job')),
            ],
            options={
                'ordering': ('-date',),
            },
        ),
        migrations.AddField(
            model_name='job',
            name='location',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='old.Location'),
        ),
        migrations.CreateModel(
            name='Invoice',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(blank=True, null=True)),
                ('value', models.DecimalField(decimal_places=2, max_digits=13)),
                ('payment_date', models.DateField(blank=True, null=True)),
                ('notes', models.TextField(blank=True, null=True)),
                ('job', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='old.Job')),
            ],
            options={
                'ordering': ('-id',),
            },
        ),
        migrations.CreateModel(
            name='Factor',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('label', models.TextField()),
                ('notes', models.TextField(blank=True, null=True)),
                ('job', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='old.Job')),
            ],
            options={
                'ordering': ('-id',),
            },
        ),
        migrations.AddField(
            model_name='element',
            name='factor',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='old.Factor'),
        ),
        migrations.CreateModel(
            name='Closure',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(blank=True, null=True)),
                ('notes', models.TextField(blank=True, null=True)),
                ('job', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='old.Job')),
            ],
            options={
                'ordering': ('-date',),
            },
        ),
        migrations.AddField(
            model_name='client',
            name='organisation',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='old.Organisation'),
        ),
        migrations.CreateModel(
            name='ASC',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('label', models.TextField(blank=True, null=True)),
                ('unit_order', models.IntegerField(blank=True, null=True)),
                ('horizon_prefix', models.IntegerField(blank=True, null=True)),
                ('horizon', models.TextField(blank=True, null=True)),
                ('horizon_suffix', models.IntegerField(blank=True, null=True)),
                ('horizon_suffix2', models.IntegerField(blank=True, null=True)),
                ('upper_depth', models.FloatField(blank=True, null=True)),
                ('lower_depth', models.FloatField(blank=True, null=True)),
                ('colour', models.TextField(blank=True, null=True)),
                ('hue_dry', models.TextField(blank=True, null=True)),
                ('value_dry', models.TextField(blank=True, null=True)),
                ('chroma_dry', models.TextField(blank=True, null=True)),
                ('hue_moist', models.TextField(blank=True, null=True)),
                ('value_moist', models.TextField(blank=True, null=True)),
                ('chroma_moist', models.TextField(blank=True, null=True)),
                ('field_texture', models.TextField(blank=True, null=True)),
                ('texture_qualifier', models.TextField(blank=True, null=True)),
                ('sand_size', models.TextField(blank=True, null=True)),
                ('sand_sorting', models.TextField(blank=True, null=True)),
                ('moisture', models.TextField(blank=True, null=True)),
                ('strength', models.TextField(blank=True, null=True)),
                ('structure_type', models.TextField(blank=True, null=True)),
                ('structure_grade', models.TextField(blank=True, null=True)),
                ('structure_size', models.TextField(blank=True, null=True)),
                ('coarse_frags_distribution', models.TextField(blank=True, null=True)),
                ('coarse_frags_abundance', models.TextField(blank=True, null=True)),
                ('coarse_frags_size', models.TextField(blank=True, null=True)),
                ('coarse_frags_roundness', models.TextField(blank=True, null=True)),
                ('coarse_frags_sphericity', models.TextField(blank=True, null=True)),
                ('coarse_frags_type', models.TextField(blank=True, null=True)),
                ('coarse_frags2_distribution', models.TextField(blank=True, null=True)),
                ('coarse_frags2_abundance', models.TextField(blank=True, null=True)),
                ('coarse_frags2_size', models.TextField(blank=True, null=True)),
                ('coarse_frags2_roundness', models.TextField(blank=True, null=True)),
                ('coarse_frags2_sphericity', models.TextField(blank=True, null=True)),
                ('coarse_frags2_type', models.TextField(blank=True, null=True)),
                ('voids_cracks', models.TextField(blank=True, null=True)),
                ('voids_pore_size', models.TextField(blank=True, null=True)),
                ('voids_pore_abundance', models.TextField(blank=True, null=True)),
                ('roots1_size', models.TextField(blank=True, null=True)),
                ('roots1_abundance', models.TextField(blank=True, null=True)),
                ('roots2_size', models.TextField(blank=True, null=True)),
                ('roots2_abundance', models.TextField(blank=True, null=True)),
                ('segregations1_colour', models.TextField(blank=True, null=True)),
                ('segregations1_abundance', models.TextField(blank=True, null=True)),
                ('segregations1_size', models.TextField(blank=True, null=True)),
                ('segregations1_form', models.TextField(blank=True, null=True)),
                ('segregations2_colour', models.TextField(blank=True, null=True)),
                ('segregations2_abundance', models.TextField(blank=True, null=True)),
                ('segregations2_size', models.TextField(blank=True, null=True)),
                ('segregations2_form', models.TextField(blank=True, null=True)),
                ('lower_bound_dist', models.TextField(blank=True, null=True)),
                ('lower_bound_shape', models.TextField(blank=True, null=True)),
                ('notes', models.TextField(blank=True, null=True)),
                ('data_entry_notes', models.TextField(blank=True, null=True)),
                ('element', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='old.Element')),
            ],
        ),
    ]
